type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachineStep4.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachineStep4 {
        public static void main(String[] args) {
            int amountOfWater=400;
            int amountOfMilk=540;
            int amountOfCoffeBeans=120;
            int amountOfDisposableCups=9;
            int amountOfMoney=550;
            Scanner scanner = new Scanner(System.in);


            printIngredients(amountOfWater,amountOfMilk,amountOfCoffeBeans,amountOfDisposableCups,amountOfMoney);
            System.out.println("Write action (buy, fill, take):");
            String action = scanner.next();
            switch (action){
                case "buy":buyAction();
                    break;
                case "fill":fillAction();
                    break;
                case "take":takeAction();
                    break;
                default:
                    break;
            }

        }
        public static void printIngredients(
                int amountOfWater,
                int amountOfMilk,
                int amountOfCoffeBeans,
                int amountOfDisposableCups,
                int amountOfMoney){
            System.out.println("The coffee machine has:");
            System.out.println(amountOfWater+" of water");
            System.out.println(amountOfMilk+" of milk");
            System.out.println(amountOfCoffeBeans+" of coffee beans");
            System.out.println(amountOfDisposableCups+" of disposable cups");
            System.out.println(amountOfMoney+" of money");

        }
        public static void buyAction(){
            Scanner scanner = new Scanner(System.in);
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
            int CoffeeType= scanner.nextInt();
            switch (CoffeeType){
                case 1:
                    printIngredients(400-250,540,120-16,9-1,550+4);
                    break;
                case 2:
                    printIngredients(400-350,540-75,120-20,9-1,550+7);
                    break;
                case 3:
                    printIngredients(400-200,540-100,120-12,9-1,550+6);
                    break;
            }


        }

        public static void fillAction(){
            Scanner scanner = new Scanner(System.in);
            System.out.println("Write how many ml of water do you want to add:");
            int AmountWater=scanner.nextInt();
            System.out.println("Write how many ml of milk do you want to add:");
            int AmountMilk=scanner.nextInt();
            System.out.println("Write how many grams of coffee beans do you want to add:");
            int AmountCoffee=scanner.nextInt();
            System.out.println("Write how many disposable cups of coffee do you want to add:");
            int AmountCups=scanner.nextInt();
            int amountOfWater=400+AmountWater;
            int amountOfMilk=540+AmountMilk;
            int amountOfCoffeBeans=120+AmountCoffee;
            int amountOfDisposableCups=9+AmountCups;
            printIngredients(amountOfWater,amountOfMilk,amountOfCoffeBeans,amountOfDisposableCups,550);


        }
        public static void takeAction(){
            System.out.println("I gave you $"+550);
            printIngredients(400,540,120,9,0);

        }

    }
  learner_created: true
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;
    import java.util.*;

    public class CoffeeMachine {
        static int amountOfWater=400;
        static int amountOfMilk=540;
        static int amountOfCoffeBeans=120;
        static int amountOfDisposableCups=9;
        static int amountOfMoney=550;
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);


            while (true){
                System.out.println("Write action (buy, fill, take, remaining, exit):");
                String action = scanner.next();
                PerformAction(action);

            }

        }
        public static void PerformAction(String action){
            switch (action){
                case "buy": PerformBuy();
                            break;
                case "fill": PerformFill();
                             break;
                case "take": PerformTake();
                             break;
                case "remaining":PerformRemaining();
                                 break;
                case "exit":System.exit(0);
                            break;
                default:break;
            }
        }
        public static void PerformBuy(){
            Scanner scanner = new Scanner(System.in);
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:");
            String SelectCoffee = scanner.next();
            switch(SelectCoffee){
                case "1":EspressoValidation();
                        break;
                case "2":LatteValidation();
                        break;
                case "3":CappuccinoValidation();
                         break;
                case "back":break;
                default:break;
            }

        }
        public static void PerformFill(){
            CoffeeMachine obj = new CoffeeMachine();
            Scanner scanner = new Scanner(System.in);
            System.out.println("Write how many ml of water do you want to add:");
            int AmountWater=scanner.nextInt();
            System.out.println("Write how many ml of milk do you want to add:");
            int AmountMilk=scanner.nextInt();
            System.out.println("Write how many grams of coffee beans do you want to add:");
            int AmountCoffee=scanner.nextInt();
            System.out.println("Write how many disposable cups of coffee do you want to add:");
            int AmountCups=scanner.nextInt();
            obj.amountOfWater+=AmountWater;
            obj.amountOfMilk+=AmountMilk;
            obj.amountOfCoffeBeans+=AmountCoffee;
            obj.amountOfDisposableCups+=AmountCups;

        }
        public static void PerformRemaining(){
            CoffeeMachine obj =new CoffeeMachine();
            System.out.println("The coffee machine has:");
            System.out.println(obj.amountOfWater+" of water");
            System.out.println(obj.amountOfMilk+" of milk");
            System.out.println(obj.amountOfCoffeBeans+" of coffee beans");
            System.out.println(obj.amountOfDisposableCups+" of disposable cups");
            System.out.println("$"+obj.amountOfMoney+" of money");
        }
        public static void PerformTake(){
            CoffeeMachine obj = new CoffeeMachine();
            System.out.println("I gave you $"+obj.amountOfMoney);
            obj.amountOfMoney=0;
        }
        public static void EspressoValidation(){
            CoffeeMachine obj =new CoffeeMachine();
            int RequiredWater = 250;
            int RequiredCoffee = 16;
            int cost = 4;

            if(obj.amountOfWater>=RequiredWater&&obj.amountOfCoffeBeans>=RequiredCoffee&&obj.amountOfDisposableCups>0){
                System.out.println("I have enough resources, making you a coffee!");
                obj.amountOfCoffeBeans-=RequiredCoffee;
                obj.amountOfWater-=RequiredWater;
                obj.amountOfMoney+=cost;
                obj.amountOfDisposableCups-=1;
            }else{
                if(obj.amountOfWater<RequiredWater){
                    System.out.println("Sorry, not enough water!");
                }else if(obj.amountOfCoffeBeans<RequiredCoffee){
                    System.out.println("Sorry, not enough coffee beans!");
                }else{
                    System.out.println("Sorry, not enough disposable cups!");
                }
            }
        }public static void LatteValidation(){
            CoffeeMachine obj =new CoffeeMachine();
            int RequiredWater = 350;
            int RequiredMilk = 75;
            int RequiredCoffee = 20;
            int cost = 7;

            if(obj.amountOfMilk>=RequiredMilk&&obj.amountOfWater>=RequiredWater&&obj.amountOfCoffeBeans>=RequiredCoffee&&obj.amountOfDisposableCups>0){
                System.out.println("I have enough resources, making you a coffee!");
                obj.amountOfCoffeBeans-=RequiredCoffee;
                obj.amountOfWater-=RequiredWater;
                obj.amountOfMilk-=RequiredMilk;
                obj.amountOfMoney+=cost;
                obj.amountOfDisposableCups-=1;
            }else{
                if(obj.amountOfWater<RequiredWater){
                    System.out.println("Sorry, not enough water!");
                }else if(obj.amountOfCoffeBeans<RequiredCoffee){
                    System.out.println("Sorry, not enough coffee beans!");
                }else if(obj.amountOfMilk<RequiredMilk){
                    System.out.println("Sorry, not enough milk!");

                }else{
                    System.out.println("Sorry, not enough disposable cups!");
                }
            }
        }
        public static void CappuccinoValidation(){
            CoffeeMachine obj =new CoffeeMachine();
            int RequiredWater = 200;
            int RequiredMilk = 100;
            int RequiredCoffee = 12;
            int cost = 6;

            if(obj.amountOfMilk>=RequiredMilk&&obj.amountOfWater>=RequiredWater&&obj.amountOfCoffeBeans>=RequiredCoffee&&obj.amountOfDisposableCups>0){
                System.out.println("I have enough resources, making you a coffee!");
                obj.amountOfCoffeBeans-=RequiredCoffee;
                obj.amountOfWater-=RequiredWater;
                obj.amountOfMilk-=RequiredMilk;
                obj.amountOfMoney+=cost;
                obj.amountOfDisposableCups-=1;
            }else{
                if(obj.amountOfWater<RequiredWater){
                    System.out.println("Sorry, not enough water!");
                }else if(obj.amountOfCoffeBeans<RequiredCoffee){
                    System.out.println("Sorry, not enough coffee beans!");
                }else if(obj.amountOfMilk<RequiredMilk){
                    System.out.println("Sorry, not enough milk!");
                }else{
                    System.out.println("Sorry, not enough disposable cups!");
                }
            }
        }

    }
  learner_created: true
- name: src/machine/CoffeeMachineStep3.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachineStep3 {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Write how many ml of water the coffee machine has:");
            int water = scanner.nextInt();
            System.out.println("Write how many ml of milk the coffee machine has:");
            int milk = scanner.nextInt();
            System.out.println("Write how many grams of coffee beans the coffee machine has:");
            int coffeeBeans = scanner.nextInt();
            System.out.println("Write how many cups of coffee you will need:");
            int numberOfCups = scanner.nextInt();
            if(cupsOfCoffeePossible(water,milk,coffeeBeans)==numberOfCups){
                System.out.println("Yes, I can make that amount of coffee");
            }else if(cupsOfCoffeePossible(water,milk,coffeeBeans)<numberOfCups){
                System.out.println("No, I can make only "+cupsOfCoffeePossible(water,milk,coffeeBeans)+" cup(s) of coffee");
            }else{
                System.out.println("Yes, I can make that amount of coffee (and even "+(numberOfCups-cupsOfCoffeePossible(water,milk,coffeeBeans))+" more than that)");
            }

        }
        public static int cupsOfCoffeePossible(int water,int milk,int coffeeBeans){
            int CupsWithWater=water/200;
            int CupsWithMilk=milk/50;
            int CupsWithCoffee=coffeeBeans/15;

            if(CupsWithWater<=CupsWithMilk&&CupsWithWater<=CupsWithCoffee){
                return CupsWithWater;
            }else if(CupsWithMilk<=CupsWithWater&&CupsWithMilk<=CupsWithCoffee){
                return CupsWithMilk;
            }
            return CupsWithCoffee;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
record: 6
